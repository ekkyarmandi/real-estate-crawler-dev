# Generated by Django 5.1.3 on 2025-01-12 12:30

import django.db.models.deletion
from django.db import migrations, models
from django.db.migrations import RunPython
import csv
import os
from pathlib import Path
import uuid
from datetime import datetime
import re


def insert_agent_data(apps, schema_editor):
    Agent = apps.get_model("listings", "Agent")

    current_dir = Path(__file__).resolve().parent.parent.parent
    csv_path = os.path.join(current_dir, "data", "20250109.csv")

    snake_case = lambda s: re.sub(r"(?<!^)(?=[A-Z])", "_", s).lower()

    agents_to_create = []
    with open(csv_path, mode="r", encoding="utf-8") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            # Convert empty strings to None
            agent_data = {
                snake_case(k): (v if v != "" else None) for k, v in row.items()
            }
            agent_data["email"] = agent_data.pop("e_mail")
            agent_data["company_type_id"] = agent_data.pop("company_type_i_d")

            for key, value in agent_data.items():
                if value in ["FALSE", "TRUE"]:
                    agent_data[key] = value == "TRUE"

            # Set agent_id from the CSV's id field and generate a new UUID
            agent_data["agent_id"] = agent_data.pop("id")
            agent_data["id"] = uuid.uuid4()

            # Convert dates
            for date_field in [
                "insurance_contract_expiry_date",
                "registry_date",
                "registry_statement_date",
            ]:
                if agent_data.get(date_field):
                    try:
                        agent_data[date_field] = datetime.strptime(
                            agent_data[date_field], "%Y-%m-%d"
                        ).date()
                    except (ValueError, TypeError):
                        agent_data[date_field] = None

            agents_to_create.append(Agent(**agent_data))

    Agent.objects.bulk_create(agents_to_create)


def reverse_agent_data(apps, schema_editor):
    Agent = apps.get_model("listings", "Agent")
    Agent.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ("listings", "0018_remove_seller_source_listing_seller"),
    ]

    operations = [
        migrations.CreateModel(
            name="Agent",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(primary_key=True, serialize=False)),
                ("agent_id", models.CharField(max_length=255, null=True)),
                ("business_site_address", models.CharField(max_length=255, null=True)),
                ("company_manager", models.CharField(max_length=255, null=True)),
                ("company_owners", models.CharField(max_length=255, null=True)),
                ("company_type_id", models.CharField(max_length=255, null=True)),
                ("company_type_name", models.CharField(max_length=255, null=True)),
                ("email", models.CharField(max_length=255, null=True)),
                (
                    "formal_owners_full_name",
                    models.CharField(max_length=255, null=True),
                ),
                ("hq_address", models.CharField(max_length=255, null=True)),
                ("identification_number", models.CharField(max_length=255, null=True)),
                ("insurance_contract_expiry_date", models.DateField(null=True)),
                ("insurance_expiry", models.BooleanField(default=False)),
                ("insurance_expiry_within_month", models.BooleanField(default=False)),
                ("main_activity", models.CharField(max_length=255, null=True)),
                ("name", models.CharField(max_length=255)),
                ("owner_full_name", models.CharField(max_length=255, null=True)),
                ("owner_national_number", models.CharField(max_length=255, null=True)),
                ("registry_date", models.DateField(null=True)),
                ("registry_number", models.CharField(max_length=255, null=True)),
                ("registry_statement_date", models.DateField(null=True)),
                (
                    "registry_statement_number",
                    models.CharField(max_length=255, null=True),
                ),
                (
                    "representatives_full_name",
                    models.CharField(max_length=255, null=True),
                ),
                ("tax_number", models.CharField(max_length=255, null=True)),
                ("web_page", models.CharField(max_length=255, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AlterModelOptions(
            name="property",
            options={},
        ),
        migrations.RemoveConstraint(
            model_name="property",
            name="unique_property_constraint",
        ),
        migrations.AlterField(
            model_name="property",
            name="listing",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="listings.listing"
            ),
        ),
        migrations.AddField(
            model_name="seller",
            name="agent",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="listings.agent",
            ),
        ),
        migrations.RunPython(insert_agent_data, reverse_agent_data),
    ]
